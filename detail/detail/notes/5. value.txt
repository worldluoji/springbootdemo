1. value的几种使用方式
//注册正常字符串
@Value("我是字符串")
private String text; 

//注入系统参数、环境变量或者配置文件中的值
@Value("${ip}")
private String ip

//注入其他Bean属性，其中student为bean的ID，name为其属性
@Value("#{student.name}")
private String name;

2. 见例子ValueTestController
发现返回结果12345:test123456
与配置文件中
username=luojiayi
password=test123456
不一致。那么Spring是如何根据@Value查询值？
DefaultListableBeanFactory#doResolveDependency：

@Nullable
public Object doResolveDependency(DependencyDescriptor descriptor, @Nullable String beanName,
      @Nullable Set<String> autowiredBeanNames, @Nullable TypeConverter typeConverter) throws BeansException {
      //省略其他非关键代码
      Class<?> type = descriptor.getDependencyType();
      //寻找@Value
      Object value = getAutowireCandidateResolver().getSuggestedValue(descriptor);
      if (value != null) {
         if (value instanceof String) {
            //解析Value值
            String strVal = resolveEmbeddedValue((String) value);
            BeanDefinition bd = (beanName != null && containsBean(beanName) ?
                  getMergedBeanDefinition(beanName) : null);
            value = evaluateBeanDefinitionString(strVal, bd);
         }
         
         //转化Value解析的结果到装配的类型
         TypeConverter converter = (typeConverter != null ? typeConverter : getTypeConverter());
         try {
            return converter.convertIfNecessary(value, type, descriptor.getTypeDescriptor());
         }
         catch (UnsupportedOperationException ex) {
            //异常处理
         }
      }
    //省略其他非关键代码
}

@Value 的工作大体分为以下三个核心步骤：
1) 寻找@Value注解：
主要是判断这个属性字段是否标记为@Value，
依据的方法参考 QualifierAnnotationAutowireCandidateResolver#findValue
@Nullable
protected Object findValue(Annotation[] annotationsToSearch) {
   if (annotationsToSearch.length > 0) {  
      AnnotationAttributes attr = AnnotatedElementUtils.getMergedAnnotationAttributes(
      AnnotatedElementUtils.forAnnotations(annotationsToSearch), this.valueAnnotationType);
      //valueAnnotationType即为@Value
      if (attr != null) {
         return extractValue(attr);
      }
   }
   return null;
}

2) 解析@Value的字符串值
String strVal = resolveEmbeddedValue((String) value);
其实是在解析嵌入的值，实际上就是“替换占位符”工作。
具体而言，它采用的是 PropertySourcesPlaceholderConfigurer 根据 PropertySources 来替换。
不过当使用 ${username} 来获取替换值时，其最终执行的查找并不是局限在application.property文件中:
[ConfigurationPropertySourcesPropertySource {name='configurationProperties'}, 
StubPropertySource {name='servletConfigInitParams'}, 
ServletContextPropertySource {name='servletContextInitParams'}, 
PropertiesPropertySource {name='systemProperties'}, 
OriginAwareSystemEnvironmentPropertySource {name='systemEnvironment'}, 
RandomValuePropertySource {name='random'},
OriginTrackedMapPropertySource {name='applicationConfig: classpath:/application.properties]'},
MapPropertySource {name='devtools'}]

PropertySourcesPropertyResolver#getProperty看到,找到也1个就退出了:
@Nullable
protected <T> T getProperty(String key, Class<T> targetValueType, boolean resolveNestedPlaceholders) {
   if (this.propertySources != null) {
      for (PropertySource<?> propertySource : this.propertySources) {
         Object value = propertySource.getProperty(key);
         if (value != null) {
            //查到value即退出  
            return convertValueIfNecessary(value, targetValueType);
         }
      }
   }
   return null;
}

从这可以看出，在解析 Value 字符串时，其实是有顺序的（查找的源是存在 CopyOnWriteArrayList 中，在启动时就被有序固定下来），
一个一个“源”执行查找，在其中一个源找到后，就可以直接返回了。
如果我们查看 systemEnvironment 这个源，会发现刚好有一个 username 和我们是重合的，且值不是 pass。

3) 将解析结果转化为要装配的对象的类型
我们会发现可能和我们要装配的类型不匹配。假设我们定义的是 UUID，而我们获取的结果是一个字符串，
那么这个时候就会根据目标类型来寻找转化器执行转化，字符串到 UUID 的转化实际上发生在 UUIDEditor中

public class UUIDEditor extends PropertyEditorSupport {

    @Override
    public void setAsText(String text) throws IllegalArgumentException          {
       if (StringUtils.hasText(text)) {
          //转化操作
          setValue(UUID.fromString(text.trim()));
       }
       else {
          setValue(null);
       }
    }
    //省略其他非关代码
   
 }

 总结:
 配置文件变量命名时，我们一定要注意不仅要避免和环境变量冲突，也要注意避免和系统变量等其他变量冲突，
 这样才能从根本上解决这个问题。