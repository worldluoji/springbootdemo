1. Spring 处理事务的时候，如果没有在 @Transactional 中配置 rollback 属性，
那么只有捕获到 RuntimeException 或者 Error 的时候才会触发回滚操作。
前置知识：
1）Spring 在初始化时，会通过扫描拦截对事务的方法进行增强。
如果目标方法存在事务，Spring 就会创建一个 Bean 对应的代理（Proxy）对象，并进行相关的事务处理操作。
2）事务本质上也是一种特殊的切面，在创建的过程中，被 CglibAopProxy 代理。
事务处理的拦截器是 TransactionInterceptor。
3）TransactionInterceptor 继承类 TransactionAspectSupport，实现了接口 MethodInterceptor。
当执行代理类的目标方法时，会触发 invoke()。
当它 catch 到异常时，会调用 completeTransactionAfterThrowing 方法做进一步处理：

protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,
    final InvocationCallback invocation) throws Throwable {
    //省略非关键代码
    Object retVal;
    try {
       retVal = invocation.proceedWithInvocation();
    }
    catch (Throwable ex) {
       completeTransactionAfterThrowing(txInfo, ex);
       throw ex;
    }
    finally {
       cleanupTransactionInfo(txInfo);
    }
    //省略非关键代码
}

->completeTransactionAfterThrowing


protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {
    //省略非关键代码
    //判断是否需要回滚
    if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {
       try {
          //执行回滚
          txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());
       }
       catch (TransactionSystemException ex2) {
          ex2.initApplicationException(ex);
          throw ex2;
       }
       catch (RuntimeException | Error ex2) {
          throw ex2;
       }
    }
    //省略非关键代码
}

->
public boolean rollbackOn(Throwable ex) {
    // 层级 1：根据"rollbackRules"及当前捕获异常来判断是否需要回滚
    RollbackRuleAttribute winner = null;
    int deepest = Integer.MAX_VALUE;
    if (this.rollbackRules != null) {
       for (RollbackRuleAttribute rule : this.rollbackRules) {
          // 当前捕获的异常可能是回滚“异常”的继承体系中的“一员”
          int depth = rule.getDepth(ex);
          if (depth >= 0 && depth < deepest) {
             deepest = depth;
             winner = rule;
          }
       }
    }
    // 层级 2：调用父类的 rollbackOn 方法来决策是否需要 rollback
    if (winner == null) {
       return super.rollbackOn(ex);
    }
    return !(winner instanceof NoRollbackRuleAttribute);
 }

 从代码可以看出，如果没有在 @Transactional 中配置 rollback 属性，或是捕获到的异常和所配置异常的类型不一致，
 就会继续调用父类的 rollbackOn() 进行处理。
 ->super.rollbackOn
 public boolean rollbackOn(Throwable ex) {
    return (ex instanceof RuntimeException || ex instanceof Error);
 }
 这就解释了为什么不显示指定抛出异常回滚时，只有RuntimeException和Error才会回滚。
 要想其它异常时回滚，则显示指定即可：
@Transactional(rollbackFor = Exception.class)
同理，如果要RuntimeException不回滚，但其它异常回滚：
@Transactional(rollbackFor = Exception.class, noRollbackFor = RuntimeException.class)


2. private添加@Transactional注解，事务无效

Bean 初始化之后，开始尝试代理操作，这个过程是从 AbstractAutoProxyCreator 里的
postProcessAfterInitialization 方法开始处理：

public Object postProcessAfterInitialization(@Nullable Object bean, String beanName) {
    if (bean != null) {
       Object cacheKey = getCacheKey(bean.getClass(), beanName);
       if (this.earlyProxyReferences.remove(cacheKey) != bean) {
          return wrapIfNecessary(bean, beanName, cacheKey);
       }
    }
    return bean;
 }

一路往下找到AopUtils#canApply：
public static boolean canApply(Pointcut pc, Class<?> targetClass, boolean hasIntroductions) {
    //省略非关键代码
    for (Class<?> clazz : classes) {
       Method[] methods = ReflectionUtils.getAllDeclaredMethods(clazz);
       for (Method method : methods) {
          if (introductionAwareMethodMatcher != null ?
                introductionAwareMethodMatcher.matches(method, targetClass, hasIntroductions) :
                methodMatcher.matches(method, targetClass)) {
             return true;
          }
       }
    }
    return false;
 }
 这个方法就是针对切面定义里的条件，确定这个方法是否可以被应用创建成代理。
 其中有一段 methodMatcher.matches(method, targetClass) 是用来判断这个方法是否符合条件。

-> 
public boolean matches(Method method, Class<?> targetClass) {
    //省略非关键代码
    TransactionAttributeSource tas = getTransactionAttributeSource();
    return (tas == null || tas.getTransactionAttribute(method, targetClass) != null);
}

->
public TransactionAttribute getTransactionAttribute(Method method, @Nullable Class<?> targetClass) {
    //省略非关键代码
    TransactionAttribute txAttr = computeTransactionAttribute(method, targetClass);
    //省略非关键代码
 }
}

->关键：
protected TransactionAttribute computeTransactionAttribute(Method method, @Nullable Class<?> targetClass) {
    //省略非关键代码
    if (allowPublicMethodsOnly() && !Modifier.isPublic(method.getModifiers())) {
       return null;
    }
    //省略非关键代码
}

1) allowPublicMethodsOnly()
->
protected boolean allowPublicMethodsOnly() {
    return this.publicMethodsOnly;
}
这个 publicMethodsOnly 属性是通过 AnnotationTransactionAttributeSource 的构造方法初始化的，默认为 true:
public AnnotationTransactionAttributeSource() {
    this(true);
}

2) isPublic
对应的几类修饰符分别是：PUBLIC: 1，PRIVATE: 2，PROTECTED: 4
public static boolean isPublic(int mod) {
    return (mod & PUBLIC) != 0;
}

这就解释了，只有当注解为事务的方法被声明为 public 的时候，才会被 Spring 处理。


3. 事务嵌套

例子：


@Service
public class CourseService {
    @Autowired
    private CourseMapper courseMapper;

    @Autowired
    private StudentCourseMapper studentCourseMapper;

    //注意这个方法标记了“Transactional”
    @Transactional(rollbackFor = Exception.class)
    public void regCourse(int studentId) throws Exception {
        studentCourseMapper.saveStudentCourse(studentId, 1);
        courseMapper.addCourseNumber(1);
    }
}


@Service
public class StudentService {
  //省略非关键代码
  @Transactional(rollbackFor = Exception.class)
  public void saveStudent(String realname) throws Exception {
      Student student = new Student();
      student.setRealname(realname);
      studentService.doSaveStudent(student);
      try {
          courseService.regCourse(student.getId());
      } catch (Exception e) {
          e.printStackTrace();
      }
  }
  //省略非关键代码
}

Spring 事务处理的核心，其关键实现参考TransactionAspectSupport.invokeWithinTransaction():

protected Object invokeWithinTransaction(Method method, @Nullable Class<?> targetClass,
    final InvocationCallback invocation) throws Throwable {

 TransactionAttributeSource tas = getTransactionAttributeSource();
 final TransactionAttribute txAttr = (tas != null ? tas.getTransactionAttribute(method, targetClass) : null);
 final PlatformTransactionManager tm = determineTransactionManager(txAttr);
 final String joinpointIdentification = methodIdentification(method, targetClass, txAttr);
 if (txAttr == null || !(tm instanceof CallbackPreferringPlatformTransactionManager)) {
    // 是否需要创建一个事务
    TransactionInfo txInfo = createTransactionIfNecessary(tm, txAttr, joinpointIdentification);
    Object retVal = null;
    try {
       // 调用具体的业务方法
       retVal = invocation.proceedWithInvocation();
    }
    catch (Throwable ex) {
       // 当发生异常时进行处理
       completeTransactionAfterThrowing(txInfo, ex);
       throw ex;
    }
    finally {
       cleanupTransactionInfo(txInfo);
    }
    // 正常返回时提交事务
    commitTransactionAfterReturning(txInfo);
    return retVal;
 }
 //......省略非关键代码.....
}

当前案例是两个事务嵌套的场景，外层事务 doSaveStudent() 和内层事务 regCourse()，每个事务都会调用到这个方法。
当捕获了异常，会调用 TransactionAspectSupport.completeTransactionAfterThrowing()：

protected void completeTransactionAfterThrowing(@Nullable TransactionInfo txInfo, Throwable ex) {
    if (txInfo != null && txInfo.getTransactionStatus() != null) {
       if (txInfo.transactionAttribute != null && txInfo.transactionAttribute.rollbackOn(ex)) {
          try {
             txInfo.getTransactionManager().rollback(txInfo.getTransactionStatus());
          }
          catch (TransactionSystemException ex2) {
             logger.error("Application exception overridden by rollback exception", ex);
             ex2.initApplicationException(ex);
             throw ex2;
          }
          catch (RuntimeException | Error ex2) {
             logger.error("Application exception overridden by rollback exception", ex);
             throw ex2;
          }
       }
       //......省略非关键代码.....
    }
 }

->
public final void rollback(TransactionStatus status) throws TransactionException {
    if (status.isCompleted()) {
       throw new IllegalTransactionStateException(
             "Transaction is already completed - do not call commit or rollback more than once per transaction");
    }
 
    DefaultTransactionStatus defStatus = (DefaultTransactionStatus) status;
    processRollback(defStatus, false);
 }

 ->
 
private void processRollback(DefaultTransactionStatus status, boolean unexpected) {
    try {
       boolean unexpectedRollback = unexpected;
 
       if (status.hasSavepoint()) {
          // 有保存点
          status.rollbackToHeldSavepoint();
       }
       else if (status.isNewTransaction()) {
          // 是否为一个新的事务
          doRollback(status);
       }
       else {
         // 处于一个更大的事务中
         if (status.hasTransaction()) {
            // 分支1
            if (status.isLocalRollbackOnly() || isGlobalRollbackOnParticipationFailure()) {
               doSetRollbackOnly(status);
            }
         }
         if (!isFailEarlyOnGlobalRollbackOnly()) {
            unexpectedRollback = false;
         }
       }
 
       // 省略非关键代码 
       if (unexpectedRollback) {
          throw new UnexpectedRollbackException(
                "Transaction rolled back because it has been marked as rollback-only");
       }
    }
    finally {
       cleanupAfterCompletion(status);
    }
 }

 在这里，因为我们用的是默认的传播类型 REQUIRED，嵌套的事务并没有开启一个新的事务，所以在这种情况下，
 当前事务是处于一个更大的事务中，所以会走到情况 3 分支 1 的代码块下。

 满足任何一个，都会执行 doSetRollbackOnly() 操作。isLocalRollbackOnly 在当前的情况下是 false，
 所以是否分设置为仅回滚就由 isGlobalRollbackOnParticipationFailure() 这个方法来决定了，其默认值为 true，
 即是否回滚交由外层事务统一决定 。

 
protected void doSetRollbackOnly(DefaultTransactionStatus status) {
    DataSourceTransactionObject txObject = (DataSourceTransactionObject) status.getTransaction();
    txObject.setRollbackOnly();
}

->
public void setRollbackOnly() {
    getConnectionHolder().setRollbackOnly();
}

接下来，我们来看外层事务。因为在外层事务中，我们自己的代码捕获了内层抛出来的异常，所以这个异常不会继续往上抛，
最后的事务会在 TransactionAspectSupport.invokeWithinTransaction() 中的 commitTransactionAfterReturning() 
中进行处理：

protected void commitTransactionAfterReturning(@Nullable TransactionInfo txInfo) {
    if (txInfo != null && txInfo.getTransactionStatus() != null) {     
        txInfo.getTransactionManager().commit(txInfo.getTransactionStatus());
    }
}


public final void commit(TransactionStatus status) throws TransactionException {
    //......省略非关键代码.....
    if (!shouldCommitOnGlobalRollbackOnly() && defStatus.isGlobalRollbackOnly()) {
       processRollback(defStatus, true);
       return;
    }
 
    processCommit(defStatus);
}


shouldCommitOnGlobalRollbackOnly()默认为false

public boolean isGlobalRollbackOnly() {
    return ((this.transaction instanceof SmartTransactionObject) &&
          ((SmartTransactionObject) this.transaction).isRollbackOnly());
}
->
public boolean isRollbackOnly() {
    return getConnectionHolder().isRollbackOnly();
}
之前已经置为了true

外层事务是否回滚的关键，最终取决于 DataSourceTransactionObject 类中的 isRollbackOnly()，而该方法的返回值，
正是我们在内层异常的时候设置的。

所以到这里，问题也就清楚了，Spring 默认的事务传播属性为 REQUIRED，如我们之前介绍的，
它的含义是：如果本来有事务，则加入该事务，如果没有事务，则创建新的事务，因而内外两层事务都处于同一个事务中。
所以，当我们在 regCourse() 中抛出异常，并触发了回滚操作时，这个回滚会进一步传播，从而把 saveStudent() 也回滚了。
最终导致整个事务都被回滚了。

知道了这个结论，修改方法也就很简单了，我们只需要对传播属性进行修改，把类型改成 REQUIRES_NEW ，这样内部事务回滚
不会影响外部事务。

当子事务声明为 Propagation.REQUIRES_NEW 时，在 TransactionAspectSupport.invokeWithinTransaction() 
中调用 createTransactionIfNecessary() 就会创建一个新的事务，独立于外层事务。
而在 AbstractPlatformTransactionManager.processRollback() 进行 rollback 处理时，
因为 status.isNewTransaction() 会因为它处于一个新的事务中而返回 true，所以它走入到了另一个分支，
执行了 doRollback() 操作，让这个子事务单独回滚，不会影响到主事务。