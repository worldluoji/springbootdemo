1. 什么是反射机制?
很多情况下程序对象是自己new的，程序相当于写死了给jvm去跑。
假如一个服务器上突然遇到某个请求要用到某个类，哎呀但没加载进jvm，是不是要停下来自己写段代码，new一下启动一下服务器?（脑残）！
反射是什么呢？当我们的程序在运行时，需要动态的加载一些类,以便获取它的属性,构造方法,一般方法等信息.
这些类可能之前用不到所以不用加载到jvm，而是在运行时根据需要才加载.
反射机制的好处:举个例子我们的项目底层有时是用mysql，有时用oracle，需要动态地根据实际情况加载驱动类.
这个时候反射就有用了，假设 com.java.dbtest.myqlConnection，com.java.dbtest.oracleConnection这两个类我们要用，
这时候我们的程序就写得比较动态化，通过Class tc = Class.forName("com.java.dbtest.TestConnection");
通过类的全类名让jvm在服务器中找到并加载这个类，而如果是oracle则传入的参数就变成另一个了。这时候就可以看到反射的好处了，
这个动态性就体现出java的特性了！举多个例子，大家如果接触过spring，会发现当你配置各种各样的bean时，是以配置文件的形式配置的，
你需要用到哪些bean就配哪些，spring容器就会根据你的需求去动态加载，你的程序就能健壮地运行。
反射机制的缺点:对性能有一定影响.使用反射实际是一种解释擦欧总,我们可以告诉JVM,我们希望得到什么并让它满足我们的需求.

2. 反射机制关键对象
1) java.lang:Class<T> : 表示一个正在运行的Java应用程序类,是反射的起源.每当编写且编译了一个新类,就会产生一个Class对象.
Class对象没有公共构造方法,其是在加载类时由JVM及通过调用类加载器中的defineClass方法自动构造的.
2) java.lang.reflect:
    Field:表示类的成员变量,也称类的属性.
    Method:代表类的方法
    Construtor:代表类的构造方法
    Array:提供了动态创建数组,以及访问数组的元素的静态方法.

3. 获取Class对象的几种方式
1). s.getClass()     已经有实例s的情况下
2). S.class          通过类名直接获取
3). Class.forName("com.testdemo.S")   通过加载的方式,推荐使用. 方式1已经有实例,再去获取就是画蛇添足;方式2会新增import语句多1个依赖
4). class.getSuperClass()    已经从1)-3)获取了Class对象,再使用它可以获取父类的Class对象
5). Class longClass = Long.TYPE  基本数据类型可以通过.TYPE直接获取Class对象