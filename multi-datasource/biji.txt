1. DataSourceProperties是定义数据源的一个基类。 可以看到其使用了@ConfigurationProperties(prefix = "spring.datasource")，所以我们在application.properties中用spring.datasource.xxx定义数据库的各种属性。

2. @ConfigurationProperties的作用是：把配置文件的信息，读取并自动封装成实体类，常常和@Bean注解一起使用。

3. @Resource默认按byName装配，如果不到与名称匹配的bean，会按byType装配。
@Resource的作用相当于@Autowired，只不过@Autowired按照byType自动注入。

4. @Autowired注解是按照类型（byType）装配依赖对象，默认情况下它要求依赖对象必须存在，如果允许null值，可以设置它的required属性为false。如果我们想使用按照名称（byName）来装配，可以结合@Qualifier注解一起使用。如下：
public class TestServiceImpl {
    @Autowired
    @Qualifier("userDao")
    private UserDao userDao; 
}

5. 什么是byType，什么是byName。
<bean id="userServiceImpl"
        class="cn.com.bochy.service.impl.UserServiceImpl"
        autowire="byName">
</bean>  
<bean id="userDao"                                         
     class="cn.com.bochy.dao.impl.UserDaoImpl">
</bean>
比如说如上这段代码，byName就是通过Bean的id或者name，byType就是按Bean的Class的类型。
若autowire="byType"意思是通过 class="cn.com.bochy.dao.impl.UserDaoImpl"来查找UserDaoImpl下所有的对象。
代码autowire="byName"意思是通过id="userDao"来查找Bean中的userDao对象.

6. DataSourceTransactionManager 提供了很多事务控制方法，把它交给spring去管理，spring底层进行事务控制时就可以调用这个对象里面相应的方法。它要依赖于一个数据源对象dataSource。


主要思想就是去除数据源相关的自动配置，自己去写。示例代码如下：
@SpringBootApplication(exclude = { DataSourceAutoConfiguration.class,
        DataSourceTransactionManagerAutoConfiguration.class,
        JdbcTemplateAutoConfiguration.class})
@Slf4j
public class MultiDatasourceApplication {

        public static void main(String[] args) {
            SpringApplication.run(MultiDatasourceApplication.class, args);
        }

        @Bean
        @ConfigurationProperties(prefix = "foo.datasource")
        public DataSourceProperties fooDataSourceProperties() {
            return new DataSourceProperties();
        }

        @Bean
        public DataSource fooDataSource() {
            DataSourceProperties  dataSourceProperties = fooDataSourceProperties();
            log.info(dataSourceProperties.getUrl());
            return dataSourceProperties.initializeDataSourceBuilder().build();
        }

        @Bean
        @Resource
        public PlatformTransactionManager fooTxManager(DataSource fooDataSource) {
            return new DataSourceTransactionManager(fooDataSource);
        }

        @Bean
        @ConfigurationProperties(prefix = "bar.datasource")
        public DataSourceProperties barDataSourceProperties() {
            return new DataSourceProperties();
        }

        @Bean
        public DataSource barDataSource() {
            DataSourceProperties  dataSourceProperties = barDataSourceProperties();
            log.info(dataSourceProperties.getUrl());
            return dataSourceProperties.initializeDataSourceBuilder().build();
        }

        @Bean
        @Resource
        public PlatformTransactionManager barTxManager(DataSource barDataSource) {
            return new DataSourceTransactionManager(barDataSource);
        }
}

7. 如果你的终端支持ANSI，设置彩色输出会让日志更具可读性。通过在application.properties中设置spring.output.ansi.enabled参数来支持。
NEVER：禁用ANSI-colored输出（默认项）
DETECT：会检查终端是否支持ANSI，是的话就采用彩色输出（推荐项）
ALWAYS：总是使用ANSI-colored格式输出，若终端不支持的时候，会有很多干扰信息，不推荐使用