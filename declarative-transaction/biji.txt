1.声明式事务主要是使用@Transactional注解，里面有很多选项，比如rollbackFor指定遇到对应的异常则回滚; propagation指定事务的传播特性。

示例代码如下：
@Service
public class FooServiceImpl implements FooService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    @Transactional
    public void insertRecored() {
        jdbcTemplate.update("INSERT INTO FOO(BAR) VALUES('AAa') ");
    }

    @Override
    @Transactional(rollbackFor = RollBackException.class)
    public void insertThenRollback() throws RollBackException {
        jdbcTemplate.update("INSERT INTO FOO(BAR) VALUES('BBb') ");
        throw new RollBackException();
    }

    @Override
    public void invokeInsertThenRollback() throws RollBackException {
        insertThenRollback();
    }
}

2. 注意，invokeInsertThenRollback是直接调用含有Transactional注解的insertThenRollback方法，但是其不支持事务。原因是同级调用无法使用动态代理。

使其支持事务的方法就是将自己的实例注入进来：
@Autowired
private FooServie fooServie;
public void invokeInsertThenRollback() throws RollBackException {
        fooServie.insertThenRollback();
}
Spring AOP实际上是为我们创建了一个代理。