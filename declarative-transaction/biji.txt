1. 声明式事务主要是使用@Transactional注解，里面有很多选项，比如rollbackFor指定遇到对应的异常则回滚;
propagation指定事务的传播特性。

示例代码如下：
@Service
public class FooServiceImpl implements FooService {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    @Override
    @Transactional
    public void insertRecored() {
        jdbcTemplate.update("INSERT INTO FOO(BAR) VALUES('AAa')");
    }

    @Override
    @Transactional(rollbackFor = RollBackException.class)
    public void insertThenRollback() throws RollBackException {
        jdbcTemplate.update("INSERT INTO FOO(BAR) VALUES('BBb')");
        throw new RollBackException();
    }

    @Override
    public void invokeInsertThenRollback() throws RollBackException {
        insertThenRollback();
    }
}

2. 注意，invokeInsertThenRollback是直接调用含有Transactional注解的insertThenRollback方法，
但是其不支持事务。原因是同级调用无法使用动态代理。

使其支持事务的方法就是将自己的实例注入进来：
@Autowired
private FooServie fooServie;
public void invokeInsertThenRollback() throws RollBackException {
    fooServie.insertThenRollback();
}
Spring AOP实际上是为我们创建了一个代理。


3. 事务的传播特性：
PROPAGATION_REQUIRED：支持当前事务，如果当前没有事务，就新建一个事务。这是默认值。
PROPAGATION_SUPPORTS：支持当前事务，如果当前没有事务，就以非事务方式执行。
PROPAGATION_MANDATORY：支持当前事务，如果当前没有事务，就抛出异常。
PROPAGATION_REQUIRED_NEW：新建事务，如果当前存在事务，把当前事务挂起。
PROPAGATION_NOT_SUPPORTED：以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
PROPAGATION_NEVER：以非事务方式执行，如果当前存在事务，则抛出异常。
PROPAGATION_NESTED：支持当前事务，如果当前事务存在，则执行一个嵌套事务，如果当前没有事务，就新建一个事务。

这里要说明一下NESTED：
外部方法有事务注解且传播行为是propagation.required ， 内部方法也有事务注解且传播行为是propagation.nested。当内部方法出现抛出异常时，外部方法捕获异常，只有内事务会回滚；当内部方法抛出异常时，外部方法不捕获异常，那么内外事务都会回滚；
外部方法有事务注解且传播行为是propagation.required ， 内部方法也有事务注解且传播行为是propagation.nested。当外部方法出现抛出异常时，内外事务都会回滚；

REQUIRED_NEW:
外部方法有事务注解且传播行为是propagation.required， 内部方法也有事务注解且传播行为是propagation.requiredNew。当内部方法出现抛出异常时，外部方法捕获异常，只有内事务会回滚；当内部方法抛出异常时，外部方法不捕获异常，那么内外事务都会回滚；
外部方法有事务注解且传播行为是propagation.required， 内部方法也有事务注解且传播行为是propagation.requiredNew。当外部方法出现抛出异常时，只有外部事务会回滚；