1. MappedSuperclass注解的使用：
当我们进行开发项目时，我们经常会用到实体映射到数据库表的操作，此时我们经常会发现在我们需要隐射的几个实体类中，有几个共同的属性，例如编号ID，创建者，创建时间，修改者，修改时间，备注等。遇到这种情况，我们可能会想到把这些属性抽象出来当成一个父类，然后再以不同的实体类来继承这个父类。
那么，我们便可以使用@MappedSuperclass注解，通过这个注解，我们可以将该实体类当成基类实体，它不会隐射到数据库表，但继承它的子类实体在隐射时会自动扫描该基类实体的隐射属性，添加到子类实体的对应数据库表中。
使用环境：
1.@MappedSuperclass注解使用在父类上面，是用来标识父类的
2.@MappedSuperclass标识的类表示其不能映射到数据库表，因为其不是一个完整的实体类，但是它所拥有的属性能够隐射在其子类对用的数据库表中
3.@MappedSuperclass标识得嘞不能再有@Entity或@Table注解

2. java.util.Optional(Java8引入)的使用：
Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。
Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。 
Optional 类的引入很好的解决空指针异常。
示例如下：
Optional<Coffee> latte = coffeeService.findOneCoffee("LATTE");
if (latte.isPresent()) {
    Order order = orderService.createOrder("luoji", latte.get());
    log.info("Update INIT to PAID: {}", orderService.updateOrder(order, OrderState.PAID));
    log.info("Update PAID to INIT: {}", orderService.updateOrder(order, OrderState.INIT));
}

3. 什么时候应该使用缓存? 什么时候应该使用Redis?
当读多写少的时候（比如读：写=10：1）就适合使用缓存。 如果读写1：1就不该使用缓存了。
如果一个值长期不变， 而且可以接受一定的延迟更新，就没必要使用Redis了，直接放在Spring提供的默认缓存， 做个超时机制，超时后更新它即可；
如果一个值在集群的多台机器中要求保证一致性，就要使用分布式缓存了，例如Redis集群。
Redis相比Memcached可以持久化数据，支持主备模式，哨兵模式，集群模式。Redis的有序集合也适合做排行榜，或者缓存论坛热门帖子等等。

4. @Cacheable 如果结果已经在缓存里面了就从缓存里取；否则就执行后将结果放到缓存里。
   @CacheEvict 缓存清理
   @CachePut 无论是否有缓存，都去做缓存的设置
   @Caching 对上面的操作（例如缓存清理，缓存设置）做打包，放入多个操作。
   @CacheConfig 对缓存做设置，例如设置缓存的名字
 
 @EnableCaching开启缓存
 整个Spring的缓存抽象实际是基于AOP的，使用了动态代理。 比如在获取一个数据时会判断该数据是直接从缓存中获取，还是从数据库获取。


 5. 使用Redis作为缓存：
 1）. maven pom.xml文件加入：
 <dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-cache</artifactId>
</dependency>
<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-data-redis</artifactId>
</dependency>

2) . 配置文件中加入
spring.cache.type=redis
spring.cache.cache-names=coffee
spring.cache.redis.time-to-live=5000
spring.cache.redis.cache-null-values=false
spring.redis.host=127.0.0.1
spring.redis.port=6379

3）. 对应Service方法中加@Cacheable注解
@Cacheable
public List<Coffee> findAllCoffee() {
    log.info("find all coffee...");
    return coffeeRepository.findAll();
}

@CacheEvict
public void reloadCoffee() {
    log.info("Reload Coffee Success");
}

4）. 在实际调用用缓存方法的类上加上@EnableCaching(proxyTargetClass = true)注解