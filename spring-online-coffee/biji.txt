1. MappedSuperclass注解的使用：
当我们进行开发项目时，我们经常会用到实体映射到数据库表的操作，此时我们经常会发现在我们需要隐射的几个实体类中，有几个共同的属性，例如编号ID，创建者，创建时间，修改者，修改时间，备注等。遇到这种情况，我们可能会想到把这些属性抽象出来当成一个父类，然后再以不同的实体类来继承这个父类。
那么，我们便可以使用@MappedSuperclass注解，通过这个注解，我们可以将该实体类当成基类实体，它不会隐射到数据库表，但继承它的子类实体在隐射时会自动扫描该基类实体的隐射属性，添加到子类实体的对应数据库表中。
使用环境：
1.@MappedSuperclass注解使用在父类上面，是用来标识父类的
2.@MappedSuperclass标识的类表示其不能映射到数据库表，因为其不是一个完整的实体类，但是它所拥有的属性能够隐射在其子类对用的数据库表中
3.@MappedSuperclass标识得嘞不能再有@Entity或@Table注解

2. java.util.Optional(Java8引入)的使用：
Optional 类是一个可以为null的容器对象。如果值存在则isPresent()方法会返回true，调用get()方法会返回该对象。
Optional 是个容器：它可以保存类型T的值，或者仅仅保存null。Optional提供很多有用的方法，这样我们就不用显式进行空值检测。 
Optional 类的引入很好的解决空指针异常。
示例如下：
Optional<Coffee> latte = coffeeService.findOneCoffee("LATTE");
if (latte.isPresent()) {
    Order order = orderService.createOrder("luoji", latte.get());
    log.info("Update INIT to PAID: {}", orderService.updateOrder(order, OrderState.PAID));
    log.info("Update PAID to INIT: {}", orderService.updateOrder(order, OrderState.INIT));
}