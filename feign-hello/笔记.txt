1. 注意依赖包版本要配套，可以去spring官网 选择spring cloud查看。

2. 新版本（Spring boot 2.1.4 + Spring cloud Greenwich SR1）客户端注册到Eureka要使用
@EnableDiscoveryClient,不要使用@EnableEurekaClient.

3. Spring Boot 2.1.4 客户端依赖包要添加
<dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
    <version>2.1.1.RELEASE</version>
</dependency>
服务器端依赖包
 <dependency>
    <groupId>org.springframework.cloud</groupId>
    <artifactId>spring-cloud-starter-netflix-eureka-server</artifactId>
</dependency>

4. 关键配置
eureka.client.service-url.defaultZone=http://eureka1:8761/eureka/
这个配置指明了注册中心的地址
eureka.instance.perferIpAddress=false  如果上面注册中心是使用域名就要配置为false，否则true
spring.application.name=e-book-consumer  注册中心Eureka显示的名字就是我们给服务取的这个名字

5. 有的版本说eureka server地址不能配置为localhost，但实验下来这个版本是可以的。

6. Feign的消费端，要加上注解@EnableFeignClients，否则找不到。还要在依赖中把provider加入
 <dependency>
    <groupId>com.feign</groupId>
    <artifactId>feign-provider</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <scope>compile</scope>
</dependency>
因为consumer会使用到provider暴露出来的接口。

7. 请求中，如果是单个单个参数，要加@RequestParam, 如果是一个对象，则要加@RequestBody

8. 在客户端配置是否启用压缩：
server.compression.enabled=true
server.compression.mime-types=application/json,application/xml,text/html,text/xml,text/plain
#server.compression.min-response-size=512
原理是在http请求和响应中加入gzip编码的请求， 由于压缩了，大大减少了网络传输的时间。

9. 关于httpclient：
feign.httpclient.enabled=true   这样feign会使用http连接池，从而提高系统性能。

10. 如何记录feign调用接口的信息和耗时？
@Bean
public Logger.Level feignLoggerLevel(){
//		NONE, 不记录任何信息，默认值。
//		BASIC, 记录请求方法、请求URL、状态码和用时。
//		HEADERS, 在BASIC的基础上再记录一些常用信息。
//		FULL: 记录请求和响应报文的全部内容。
	return Logger.Level.FULL;
}
配置文件中配置
logging.level.com.feign.feignconsumer.service.ProductService=debug
即logging.level.<FeignClient>=debug开启指定Feign客户端的DEBUG模式日志；
<FeignClient>为Feign客户端定义接口的完整路径

11. com.fasterxml.jackson.databind.exc.InvalidDefinitionException
可能是使用了Lombok插件导致序列化异常，在实体类加入如下注解即可：
@JsonIgnoreProperties(value = {"hibernateLazyInitializer", "handler"})

12. feign中ribbon的配置
#全局配置
## 请求连接的超时时间
#ribbon.ConnectTimeout=5000
## 请求处理的超时时间
#ribbon.ReadTimeout=5000

#局部配置
# 对所有操作请求都进行重试
e-book-product.ribbon.OkToRetryOnAllOperations=true
# 对当前实例的重试次数
e-book-product.ribbon.MaxAutoRetries=2
# 切换实例的重试次数
e-book-product.ribbon.MaxAutoRetriesNextServer=0
# 请求连接的超时时间
e-book-product.ribbon.ConnectTimeout=3000
# 请求处理的超时时间
e-book-product.ribbon.ReadTimeout=3000
# 指定具体的服务实例清单
#e-book-product.ribbon.listOfServers=

13. feign使用hytrix熔断机制
1）配置文件增加feign.hystrix.enabled=true
2）启动类增加注解@EnableCircuitBreaker
@EnableFeignClients
@EnableDiscoveryClient
@EnableCircuitBreaker //开启服务降级 断路器
@SpringBootApplication
public class FeignConsumerHytrixApplication {
    public static void main(String[] args) {
        SpringApplication.run(FeignConsumerHytrixApplication.class, args);
    }
}
3）客户端上指定fallback的类：
@FeignClient(name="e-book-product", fallback = ProductServiceFallBack.class, configuration = FeignClientConfig.class)
public interface ProductService
然后ProductServiceFallBack回退类实现ProductService，里面返回托底数据。